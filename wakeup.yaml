blueprint:
  name: Wake-up light alarm with sunrise effect (multi-light)
  description: 'A wake-up light alarm with a brightness and color temperature sunrise effect. Supports controlling two lights.'
  domain: automation
  input:
    light_entity:
      name: Primary wake-up light entity
      description: The main light to control. Turning it off during the sunrise will keep it off.
      selector:
        entity:
          domain: light
    secondary_light_entity:
      name: Secondary wake-up light entity
      description: An optional second light to control during the sunrise effect.
      default: none
      selector:
        entity:
          domain: light
          multiple: false
    timestamp_sensor:
      name: Alarm timestamp (sensor or input_datetime)
      description: 'Sensor with timestamp of the next alarm or input_datetime entity.'
      default: none
      selector:
        entity: {}
    manual_time:
      name: Manual alarm time
      description: Time to trigger alarm every day if no timestamp is provided.
      default: '07:00:00'
      selector:
        time: {}
    check_entity:
      name: Additional entity to check before sunrise is triggered
      description: If set, checks if entity is 'on' or 'home' before triggering.
      default: none
      selector:
        entity: {}
    sunrise_duration:
      name: Sunrise duration
      description: Duration of the sunrise effect in minutes.
      default: 15
      selector:
        number:
          min: 5.0
          max: 60.0
          step: 5.0
          unit_of_measurement: min
    pre_sunrise_actions:
      name: Pre-sunrise actions
      description: Optional actions to run before sunrise starts.
      default: []
      selector:
        action: {}
    post_sunrise_actions:
      name: Post-sunrise actions
      description: Optional actions to run after sunrise ends.
      default: []
      selector:
        action: {}

variables:
  primary_light: !input 'light_entity'
  secondary_light: !input 'secondary_light_entity'
  timestamp_sensor: !input 'timestamp_sensor'
  manual_time: !input 'manual_time'
  sunrise_duration: !input 'sunrise_duration'
  seconds: '{{ sunrise_duration * 60 }}'
  alarm_time: >-
    {{ as_timestamp(states(timestamp_sensor)) if states(timestamp_sensor) != 'none' else as_timestamp(states('sensor.date') ~ ' ' ~ manual_time) }}
  check_entity: !input 'check_entity'

trigger:
  - platform: time_pattern
    minutes: '*'

condition: []

action:
  - wait_template: >-
      {{ alarm_time and 0 < alarm_time - as_timestamp(now()) <= seconds and
      (check_entity == 'none' or states(check_entity) in ['on', 'home']) }}
  - choose:
      default: !input 'pre_sunrise_actions'
  - service: light.turn_on
    data:
      brightness: 1
    entity_id: 
      - '{{ primary_light }}'
      - '{{ secondary_light if secondary_light != "none" else primary_light }}'
  - repeat:
      while:
        - condition: template
          value_template: >-
            {{ alarm_time and as_timestamp(now()) < alarm_time }}
      sequence:
        - delay: 1
        - service: light.turn_on
          data:
            brightness: >-
              {{ ((as_timestamp(now()) - alarm_time + seconds) / seconds * 255) | int }}
          entity_id: 
            - '{{ primary_light }}'
            - '{{ secondary_light if secondary_light != "none" else primary_light }}'
  - choose:
      default: !input 'post_sunrise_actions'

mode: single
